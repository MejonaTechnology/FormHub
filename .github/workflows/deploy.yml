name: FormHub Service CI/CD

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      deploy_reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment trigger'

env:
  SERVICE_NAME: formhub-api
  SERVICE_PORT: 9000
  DEPLOY_PATH: /opt/mejona/formhub
  FRONTEND_PORT: 3000
  FRONTEND_PATH: /opt/mejona/formhub-frontend

jobs:
  build:
    name: Build FormHub Service
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true
        cache-dependency-path: backend/go.sum
    - name: Build
      run: |
        echo "Building FormHub API Service..."
        cd backend
        go mod download
        go mod verify
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o ${{ env.SERVICE_NAME }} main.go
        ls -la ${{ env.SERVICE_NAME }}
        echo "Build completed successfully"

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    - name: Install Dependencies
      run: |
        cd frontend
        npm ci --include=dev
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
        echo "Frontend build completed successfully"
    - name: Upload Frontend Build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/out/
        retention-days: 1

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: [build, build-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v4
    - name: Download Frontend Build (Optional)
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/out/
      continue-on-error: true
      id: download-frontend
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true
        cache-dependency-path: backend/go.sum
    - name: Build Production Binary
      run: |
        cd backend
        go mod download
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o ${{ env.SERVICE_NAME }} main.go
        chmod +x ${{ env.SERVICE_NAME }}
    - name: Prepare Frontend Files
      run: |
        if [ -d "frontend/out" ]; then
          echo "Frontend build found, preparing frontend files..."
          cd frontend
          npm ci
          tar -czf ../frontend-dist.tar.gz out/ node_modules/ package*.json next.config.js
        else
          echo "No frontend build found, creating dummy archive..."
          mkdir -p frontend/out
          cd frontend
          npm ci || echo "npm ci failed, continuing..."
          npm run build || echo "npm build failed, continuing..."
          tar -czf ../frontend-dist.tar.gz out/ node_modules/ package*.json next.config.js
        fi
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 13.127.59.135 >> ~/.ssh/known_hosts
    - name: Create Environment File
      run: |
        cat > .env << 'EOF'
        ENVIRONMENT=production
        PORT=9000
        DATABASE_URL=root:${{ secrets.DB_PASSWORD }}@tcp(localhost:3306)/formhub?parseTime=true
        REDIS_URL=redis://localhost:6379
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        ALLOWED_ORIGINS=http://13.127.59.135:9000,https://formhub.mejona.in,https://api.formhub.mejona.in
        SMTP_HOST=smtp.gmail.com
        SMTP_PORT=587
        SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        FROM_EMAIL=noreply@formhub.com
        FROM_NAME=FormHub by Mejona Technology
        EOF
    - name: Deploy to Server
      run: |
        echo "Deploying FormHub to AWS EC2..."
        scp -i ~/.ssh/id_rsa backend/${{ env.SERVICE_NAME }} ec2-user@13.127.59.135:/tmp/
        scp -i ~/.ssh/id_rsa .env ec2-user@13.127.59.135:/tmp/
        scp -i ~/.ssh/id_rsa backend/migrations/001_initial_schema.sql ec2-user@13.127.59.135:/tmp/
        scp -i ~/.ssh/id_rsa frontend-dist.tar.gz ec2-user@13.127.59.135:/tmp/
        
        ssh -i ~/.ssh/id_rsa ec2-user@13.127.59.135 << 'DEPLOY'
          # Create deploy directories
          sudo mkdir -p ${{ env.DEPLOY_PATH }}
          sudo mkdir -p ${{ env.FRONTEND_PATH }}
          cd ${{ env.DEPLOY_PATH }}
          
          # Stop existing services
          sudo systemctl stop ${{ env.SERVICE_NAME }} 2>/dev/null || true
          sudo systemctl stop formhub-frontend 2>/dev/null || true
          
          # Copy new files
          sudo cp /tmp/${{ env.SERVICE_NAME }} .
          sudo cp /tmp/.env .
          sudo chown ec2-user:ec2-user ${{ env.SERVICE_NAME }} .env
          sudo chmod +x ${{ env.SERVICE_NAME }}
          
          # Setup database if not exists (MariaDB with password auth)
          mysql -u root -p${{ secrets.DB_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS formhub CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" 2>/dev/null || echo "Database setup attempted"
          
          # Run migrations using separate commands (avoid nested heredoc issues)
          mysql -u root -p${{ secrets.DB_PASSWORD }} formhub -e "CREATE TABLE IF NOT EXISTS users (id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()), email VARCHAR(255) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL, first_name VARCHAR(100) NOT NULL, last_name VARCHAR(100) NOT NULL, company VARCHAR(255), plan_type VARCHAR(50) NOT NULL DEFAULT 'free', is_active BOOLEAN NOT NULL DEFAULT true, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, INDEX idx_users_email (email));"
          mysql -u root -p${{ secrets.DB_PASSWORD }} formhub -e "CREATE TABLE IF NOT EXISTS api_keys (id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()), user_id VARCHAR(36) NOT NULL, name VARCHAR(255) NOT NULL, key_hash VARCHAR(255) UNIQUE NOT NULL, permissions TEXT NOT NULL DEFAULT 'form_submit', rate_limit INTEGER NOT NULL DEFAULT 1000, is_active BOOLEAN NOT NULL DEFAULT true, last_used_at TIMESTAMP NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE, INDEX idx_api_keys_user_id (user_id), INDEX idx_api_keys_key_hash (key_hash));"
          mysql -u root -p${{ secrets.DB_PASSWORD }} formhub -e "CREATE TABLE IF NOT EXISTS forms (id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()), user_id VARCHAR(36) NOT NULL, name VARCHAR(255) NOT NULL, description TEXT, target_email VARCHAR(255) NOT NULL, cc_emails TEXT, subject VARCHAR(500), success_message TEXT, redirect_url TEXT, webhook_url TEXT, spam_protection BOOLEAN NOT NULL DEFAULT false, file_uploads BOOLEAN NOT NULL DEFAULT false, max_file_size BIGINT NOT NULL DEFAULT 5242880, is_active BOOLEAN NOT NULL DEFAULT true, submission_count BIGINT NOT NULL DEFAULT 0, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE, INDEX idx_forms_user_id (user_id));"
          mysql -u root -p${{ secrets.DB_PASSWORD }} formhub -e "CREATE TABLE IF NOT EXISTS submissions (id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()), form_id VARCHAR(36) NOT NULL, data JSON NOT NULL, ip_address VARCHAR(45), user_agent TEXT, referrer TEXT, is_spam BOOLEAN NOT NULL DEFAULT false, spam_score DECIMAL(3,2) NOT NULL DEFAULT 0.0, email_sent BOOLEAN NOT NULL DEFAULT false, webhook_sent BOOLEAN NOT NULL DEFAULT false, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (form_id) REFERENCES forms(id) ON DELETE CASCADE, INDEX idx_submissions_form_id (form_id), INDEX idx_submissions_created_at (created_at));"
          
          # Deploy Frontend
          cd ${{ env.FRONTEND_PATH }}
          sudo cp /tmp/frontend-dist.tar.gz .
          sudo tar -xzf frontend-dist.tar.gz
          sudo chown -R ec2-user:ec2-user .
          
          # Verify frontend files
          ls -la
          echo "Node.js version: $(node --version || echo 'Node.js not found')"
          echo "NPM version: $(npm --version || echo 'NPM not found')"
          
          # Create frontend environment file
          sudo tee .env.local > /dev/null << 'FRONTEND_ENV'
        NEXT_PUBLIC_API_URL=https://formhub.mejona.in/api/v1
        NEXT_PUBLIC_FORMHUB_URL=https://formhub.mejona.in
        FRONTEND_ENV
          
          # Install Node.js if not present (Amazon Linux 2023)
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js..."
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo yum install -y nodejs
            echo "Node.js installation completed"
          else
            echo "Node.js already installed: $(node --version)"
          fi
          
          # Frontend service not needed - using static export served via GitHub Pages
          echo "Skipping frontend service creation - using GitHub Pages static hosting"
          
          # Back to API directory for API service setup
          cd ${{ env.DEPLOY_PATH }}
          
          # Create systemd service
          sudo tee /etc/systemd/system/${{ env.SERVICE_NAME }}.service > /dev/null << 'SERVICE'
        [Unit]
        Description=FormHub API Service
        After=network.target mysql.service
        
        [Service]
        Type=simple
        User=ec2-user
        Group=ec2-user
        WorkingDirectory=${{ env.DEPLOY_PATH }}
        ExecStart=${{ env.DEPLOY_PATH }}/${{ env.SERVICE_NAME }}
        Restart=always
        RestartSec=10
        Environment=GIN_MODE=release
        
        [Install]
        WantedBy=multi-user.target
        SERVICE
          
          # Start services
          sudo systemctl daemon-reload
          sudo systemctl enable ${{ env.SERVICE_NAME }}
          sudo systemctl start ${{ env.SERVICE_NAME }}
          
          # Skip frontend service for static export builds - frontend is served via GitHub Pages
          echo "Frontend deployment: Using static export served via GitHub Pages"
          echo "Frontend URL: https://mejonatechnology.github.io/FormHub/"
          
          sleep 15
          echo "=== API Service Status ==="
          sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager || echo "API service status check failed"
        DEPLOY
    - name: Verify Deployment
      run: |
        echo "Verifying FormHub deployment..."
        sleep 20
        
        # Test Backend API (Critical)
        echo "=== Testing Backend API ==="
        for i in {1..5}; do
          if curl -f http://13.127.59.135:${{ env.SERVICE_PORT }}/health; then
            echo "✅ FormHub Backend API health check passed!"
            break
          else
            echo "API attempt $i failed, retrying..."
            sleep 10
          fi
        done
        
        # Test form submission endpoint
        echo "=== Testing Form Submission ==="
        if curl -f -X POST http://13.127.59.135:${{ env.SERVICE_PORT }}/api/v1/submit \
          -H "Content-Type: application/json" \
          -d '{"access_key": "test-key-123", "name": "CI/CD Test", "email": "cicd@example.com", "message": "Deployment verification test"}'; then
          echo "✅ Form submission endpoint working!"
        else
          echo "⚠️ Form submission test failed (may be due to missing test API key)"
        fi
        
        echo "🎉 FormHub Backend deployment verification completed!"
        echo "📊 Frontend (GitHub Pages): https://mejonatechnology.github.io/FormHub/"
        echo "🔗 Backend API: http://13.127.59.135:${{ env.SERVICE_PORT }}/api/v1"
        echo "🏥 Health Check: http://13.127.59.135:${{ env.SERVICE_PORT }}/health"